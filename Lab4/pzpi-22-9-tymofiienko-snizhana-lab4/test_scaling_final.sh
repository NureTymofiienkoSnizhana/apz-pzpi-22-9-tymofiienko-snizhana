#!/bin/bash

echo "üê≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è Pet Health —Å–∏—Å—Ç–µ–º–∏..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Locust
if ! command -v locust &> /dev/null; then
    echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Locust..."
    pip3 install locust
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è locustfile.py
echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è locustfile.py..."
cat > locustfile.py << 'LOCUST_EOF'
from locust import HttpUser, task, between
import json
import random

class PetHealthUser(HttpUser):
    wait_time = between(1, 3)

    @task(5)
    def test_root(self):
        """–¢–µ—Å—Ç—É—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤–∏–π endpoint"""
        self.client.get("/", catch_response=True)

    @task(3)
    def test_api_root(self):
        """–¢–µ—Å—Ç—É—î–º–æ API –∫–æ—Ä–µ–Ω–µ–≤–∏–π endpoint"""
        with self.client.get("/api/pet-and-health/", catch_response=True) as response:
            if "Authorization header required" in response.text:
                response.success()

    @task(2)
    def test_health_check(self):
        """–¢–µ—Å—Ç—É—î–º–æ health check"""
        self.client.get("/health", catch_response=True)

    @task(1)
    def test_login_page(self):
        """–¢–µ—Å—Ç—É—î–º–æ login endpoint"""
        with self.client.get("/api/pet-and-health/login/", catch_response=True) as response:
            response.success()
LOCUST_EOF

# –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
test_with_instances() {
    local instances=$1
    echo "=== –¢–ï–°–¢: $instances –Ü–ù–°–¢–ê–ù–°(–Ü–í) ==="

    # –û—á–∏—â–µ–Ω–Ω—è
    echo "üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker ps -q --filter "name=pet-" | while read -r container_id; do
        if [ -n "$container_id" ]; then
            docker stop "$container_id" 2>/dev/null || true
        fi
    done

    docker ps -aq --filter "name=pet-" | while read -r container_id; do
        if [ -n "$container_id" ]; then
            docker rm "$container_id" 2>/dev/null || true
        fi
    done

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
    docker network create pet-health-net 2>/dev/null || true

    # –ó–∞–ø—É—Å–∫ MongoDB
    echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫ MongoDB..."
    docker run -d \
        --name pet-mongodb \
        --network pet-health-net \
        -e MONGO_INITDB_ROOT_USERNAME=welnersis \
        -e MONGO_INITDB_ROOT_PASSWORD=testpass123 \
        mongo:6.0

    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É MongoDB..."
    sleep 15

    # –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥—É
    echo "üöÄ –ó–∞–ø—É—Å–∫ $instances —ñ–Ω—Å—Ç–∞–Ω—Å(—ñ–≤) –±–µ–∫–µ–Ω–¥—É..."
    for i in $(seq 1 $instances); do
        local port=$((8080 + i - 1))
        docker run -d \
            --name pet-backend-$i \
            --network pet-health-net \
            -p $port:8080 \
            -e PORT=8080 \
            -e MONGO_USERNAME=welnersis \
            -e MONGO_PASSWORD=testpass123 \
            -e JWT_SECRET=test-secret \
            pet-health-backend:latest
        echo "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ pet-backend-$i –Ω–∞ –ø–æ—Ä—Ç—ñ $port"
    done

    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –±–µ–∫–µ–Ω–¥—É..."
    sleep 25

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –Ω–∞ –ø–æ—Ä—Ç—ñ 8080..."
    service_available=false
    for i in {1..10}; do
        if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "‚úÖ –°–µ—Ä–≤—ñ—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π"
            service_available=true
            break
        else
            echo "‚è≥ –û—á—ñ–∫—É—î–º–æ... ($i/10)"
            sleep 3
        fi
    done

    if [ "$service_available" = false ]; then
        echo "‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"
        return 1
    fi

    # –¢–µ—Å—Ç –∑ Locust
    mkdir -p test_results
    echo "üöÄ –ó–∞–ø—É—Å–∫ Locust —Ç–µ—Å—Ç—É –¥–ª—è $instances —ñ–Ω—Å—Ç–∞–Ω—Å–∞(—ñ–≤)..."

    if locust -f locustfile.py \
           --host=http://localhost:8080 \
           --users=500 \
           --spawn-rate=20 \
           --run-time=120s \
           --html=test_results/report_${instances}_instances.html \
           --csv=test_results/results_${instances}_instances \
           --headless; then
        echo "‚úÖ Locust —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
    else
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Locust —Ç–µ—Å—Ç—É"
        return 1
    fi

    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è $instances —ñ–Ω—Å—Ç–∞–Ω—Å(—ñ–≤) –∑–±–µ—Ä–µ–∂–µ–Ω–æ"

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    if docker ps --filter "name=pet-" --format "table {{.Names}}\t{{.Status}}" | grep -q pet-; then
        docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" $(docker ps -q --filter "name=pet-")
    else
        echo "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    fi

    sleep 5
}

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è
cleanup() {
    echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    docker ps -q --filter "name=pet-" | while read -r container_id; do
        if [ -n "$container_id" ]; then
            docker stop "$container_id" 2>/dev/null || true
        fi
    done

    docker ps -aq --filter "name=pet-" | while read -r container_id; do
        if [ -n "$container_id" ]; then
            docker rm "$container_id" 2>/dev/null || true
        fi
    done

    docker network rm pet-health-net 2>/dev/null || true
}

# –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
trap cleanup EXIT INT TERM

# –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
echo "üî® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—É..."
if ! docker images | grep -q pet-health-backend; then
    echo "üî® –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—É..."
    if ! docker build -t pet-health-backend:latest .; then
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ –æ–±—Ä–∞–∑—É"
        exit 1
    fi
fi

# –¢–µ—Å—Ç–∏
echo "üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è..."
for instances in 1 2 3; do
    if ! test_with_instances $instances; then
        echo "‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ $instances —ñ–Ω—Å—Ç–∞–Ω—Å(–∞–º–∏) –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—è"
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ç–µ—Å—Ç–æ–º –∑–∞–º—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    fi
    echo ""
done

echo "üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
if [ -d "test_results" ] && [ "$(ls -A test_results 2>/dev/null)" ]; then
    ls -la test_results/
else
    echo "–ü–∞–ø–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è"
fi

echo ""
echo "üîó –í—ñ–¥–∫—Ä–∏–π—Ç–µ HTML –∑–≤—ñ—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:"
if ls test_results/report_*.html 1> /dev/null 2>&1; then
    for file in test_results/report_*.html; do
        if [ -f "$file" ]; then
            echo "   file://$PWD/$file"
        fi
    done
else
    echo "HTML –∑–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
fi

echo "‚ú® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"