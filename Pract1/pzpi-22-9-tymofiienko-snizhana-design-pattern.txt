Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії



Звіт
З дисципліни «Архітектура програмного забезпечення»
З практичної роботи №1




Виконала:
ст. гр. ПЗПІ-22-9						              Тимофієнко С. О.

Перевірив:
ст. викл. ПІ						              	    Сокорчук І. П.









Харків 2025 
1 ШАБЛОН (ПАТЕРН) ПРОЕКТУВАННЯ: МІСТ (BRIDGE)
1.1. Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	23.03.2025	0.1	Створено базову структуру звіту, додано титульну сторінку та розділ «Історія змін»
2	23.03.2025	0.2	Створено розділ «Завдання»
3	23.03.2025	0.3
4	23.03.2025	0.4
5	23.03.2025	0.5	Додано дотаток А з посиланням на відеоролик
6	23.03.2025	0.6	Додано додаток Б зі слайдами презентації
7	23.03.2025	0.7	Додано додаток В з програмним кодом

1.2. Завдання
Завдання до практичної роботи полягає в ознайомленні з патерном проєктування «Bridge» та його принципами застосування в об'єктно-орієнтованому програмуванні. Необхідно дослідити, як цей патерн дозволяє розділити абстракцію від реалізації, уникнути надмірного спадкування та забезпечити незалежне розширення двох ієрархій — абстракцій і реалізацій. У межах роботи слід реалізувати власний приклад застосування патерну Bridge мовою програмування на вибір, створивши абстракцію з методами, інтерфейс реалізації, кілька конкретних реалізацій та розширених абстракцій, які демонструють гнучкість структури. Також необхідно побудувати UML-діаграму реалізованих класів, пояснити вибір такої архітектури, порівняти її з альтернативними підходами, описати переваги та можливість динамічної заміни реалізації під час виконання програми.

1.3. Опис виконаної роботи
Міст: також відомий як: Bridge
1) Суть патерна
Патерн Міст — це один із структурних патернів, головна мета якого— розділити великий клас або набір класів на дві окремі ієрархії: абстракцію та реалізацію. Це робиться для того, щоб уникнути великої кількості комбінацій підкласів.

2) Застосування
- Якщо ви хочете розділити монолітний клас, який містить кілька різних реалізацій якої-небудь функціональності (наприклад, якщо клас може працювати з різними системами баз даних).
 Чим більший клас, тим важче розібратись у його коді, і тим більше це розтягує час розробки. Крім того, зміни, що вносяться в одну з реалізацій, призводять до редагування всього класу, що може викликати появу несподіваних помилок у коді.
Міст дозволяє розділити монолітний клас на кілька окремих ієрархій. Після цього ви можете змінювати код в одній гілці класів незалежно від іншої. Це спрощує роботу над кодом і зменшує ймовірність внесення помилок.
- Якщо клас потрібно розширювати в двох незалежних площинах.
 Міст пропонує виділити одну з таких площин в окрему ієрархію класів, зберігаючи посилання на один з її об’єктів у початковому класі.
- Якщо ви хочете мати можливість змінювати реалізацію під час виконання програми.
 Міст дозволяє замінювати реалізацію навіть під час виконання програми, оскільки конкретна реалізація не «зашита» в клас абстракції.

3) Структура
Це вже UML-діаграма патерну. Як бачимо, абстракція зберігає посилання на інтерфейс реалізації. Метод feature1() делегує виконання методу method1() в реалізації.
Цікаво, що структура дозволяє додавати нові абстракції, нові реалізації, або змінювати вже існуючі без впливу на інші частини. Це реалізує принцип відкритості/закритості з SOLID.

4) Учасники патерну
Патерн складається з кількох ключових учасників.
• Абстракція — це високорівневий інтерфейс, через який працює клієнт. Вона не виконує роботу сама, а делегує її.
• Реалізація — інтерфейс, що описує набір дій, які можуть бути виконані.
• Конкретна реалізація — клас, який реалізує цей інтерфейс, наприклад, взаємодіє з API чи виконує низькорівневі задачі.
• Розширена абстракція — це підклас абстракції, який додає нові поведінки або функціональність.
• І, звісно, клієнт, який взаємодіє лише з абстракцією і не знає про реалізацію.
Це дозволяє легко замінювати реалізації, не змінюючи абстракцію.

5) Схема використання
На схемі ми бачимо ідею "моста": у нас є дві незалежні ієрархії, які зв’язані між собою. Клієнт працює з абстракцією, яка делегує всі дії реалізації. А реалізація, в свою чергу, може бути змінена або розширена.
Цей міст дає нам гнучкість: ми можемо змінювати поведінку окремо в кожній ієрархії, без створення великої кількості підкласів.

6) Переваги та недоліки
Переваги:
•  Дозволяє будувати платформо-незалежні програми.
•  Приховує зайві або небезпечні деталі реалізації від клієнтського коду.
•  Реалізує принцип відкритості/закритості.
Нкдоліки:
• Ускладнює код програми внаслідок введення додаткових класів.


7) Відносини з іншими патернами
• Міст проектують заздалегідь, щоб розвивати великі частини програми окремо одну від одної. Адаптер застосовується постфактум, щоб змусити несумісні класи працювати разом.
• Міст, Стратегія та Стан (а також трохи і Адаптер) мають схожі структури класів — усі вони побудовані за принципом «композиції», тобто делегування роботи іншим об’єктам. Проте вони відрізняються тим, що вирішують різні проблеми. Пам’ятайте, що патерни — це не тільки рецепт побудови коду певним чином, але й описування проблем, які призвели до такого рішення.
• Абстрактна фабрика може працювати спільно з Мостом. Це особливо корисно, якщо у вас є абстракції, які можуть працювати тільки з деякими реалізаціями. В цьому випадку фабрика визначатиме типи створюваних абстракцій та реалізацій.
• Патерн Будівельник може бути побудований у вигляді Мосту: директор гратиме роль абстракції, а будівельники — реалізації.

8) Приклад
На цьому слайді ми бачимо приклад застосування патерну “Міст” на мові Go. Це типовий сценарій, де ми розділяємо ієрархію пультів керування та пристроїв, якими вони керують. Ідея в тому, що пульти й пристрої можуть розвиватися незалежно один від одного.
- Абстракція – Remote
Почнемо з класу Remote. Це — наша абстракція. Вона містить логіку, з якою працює клієнт: перемикання живлення (TogglePower) та збільшення гучності (VolumeUp).
Але ця абстракція не виконує реальних дій сама. Вона лише делегує їх об'єкту, який реалізує інтерфейс Device. Тобто, логіка є, але самі дії делегуються назовні.
- Розширена абстракція – AdvancedRemote
Далі — підклас AdvancedRemote. Це приклад розширеної абстракції. Він додає нову функціональність — метод Mute(), який миттєво вимикає звук.
Це показує, як ми можемо розширювати абстракції без зміни реалізацій пристроїв.
- Інтерфейс реалізації – Device
Тепер подивимось на інтерфейс Device. Це і є реалізація в термінах патерну. В ньому описано дії, які повинні реалізовуватись: вмикання, вимикання, отримання та встановлення гучності.
Це мінімальний контракт, який дозволяє пультам керувати будь-яким пристроєм, не знаючи, що це — телевізор, радіо чи щось інше.
- Конкретні реалізації – Tv і Radio
У нас є дві реалізації інтерфейсу Device: Tv та Radio. Вони реалізують ту саму поведінку, але можуть мати різну внутрішню логіку.
Завдяки патерну Міст, ми можемо написати один і той самий пульт, і він буде працювати як з телевізором, так і з радіо — і навіть з будь-яким іншим пристроєм, який реалізує інтерфейс Device. Нам не потрібно змінювати абстракцію при додаванні нових пристроїв.
- Клієнтський код – головна перевага
Нарешті, подивімося на main(). Тут ми створюємо телевізор і пов'язуємо його з пультом. Потім викликаємо методи TogglePower і VolumeUp.
Те саме — з радіо. Ми використовуємо AdvancedRemote, який додає функцію Mute.
І головне — ні пульт, ні клієнтський код не знають, що саме відбувається в середині об’єкта Tv або Radio. Вся взаємодія йде через міст — інтерфейс Device. Це і є головна перевага патерну Міст.
 Цей приклад добре показує, як Міст дозволяє досягти незалежності між абстракцією (пультами) та реалізацією (пристроями). Ми можемо легко додати новий пристрій — наприклад, кондиціонер або проектор, — просто створивши нову реалізацію інтерфейсу Device.
Так само ми можемо створювати нові види пультів — з таймером, голосовим керуванням або дисплеєм — без змін у коді пристроїв.

1.4. Висновки
В результаті дослідження патерну проєктування Bridge можна зробити такі висновки: цей патерн є ефективним інструментом для розділення абстракції та реалізації, що дозволяє незалежно розвивати обидві сторони без ризику порушення цілісності коду. Завдяки застосуванню композиції замість спадкування, Bridge допомагає уникати множинних комбінацій підкласів, які виникають при спробі поєднати кілька змінних аспектів в одній ієрархії. Такий підхід сприяє дотриманню принципів SOLID, особливо принципу відкритості/закритості, покращує масштабованість та підтримуваність коду. Крім того, патерн Bridge демонструє свою ефективність у кросплатформенних рішеннях, реалізації адаптивних інтерфейсів та в усіх ситуаціях, де важливо забезпечити гнучкість і мінімальну зв’язаність між компонентами. 
Додаток А
Хронологічний опис та посилання

Відеозапис доповіді на YouTube: https://youtu.be/pfzUjIFkJS0
Хронологічний опис доповіді:
00:00 – Знайомство (представлення доповідача, огляд теми, мета зустрічі).
00:13 – Вступ (суть патерну проєктування Міст).
00:31 – Застосування патерну Міст.
01:37 – Структура патерну
02:06 – Учасники патерну (компоненти)
02:47 – Схема використання
03:13 – Переваги та недоліки використання патерну
03:35 – Відносини з іншими патернами
04:31 – Приклад коду
06:48 – Висновки
07:39 – Використані джерела 
Додаток Б
Слайди презентації доповіді


Рисунок Б.1 – Титульний слайд


Рисунок Б.2 – Суть патерну


Рисунок Б.3 – Застосування патерну


Рисунок Б.4 – Структура патерну


Рисунок Б.5 – Учасники (компоненти) патерну


Рисунок Б.6 – Схема використання патерну

Рисунок Б.7 – Переваги та недоліки


Рисунок Б.8 – Відносини з іншими патернами

Рисунок Б.9 – Приклад коду


Рисунок Б.10 – Приклад коду

Рисунок Б.11 – Приклад коду


Рисунок Б.12 - Висновки

Рисунок Б.13 – Використані джерела
 
Додаток В
Приклад реалізації патерну Bridge на мові Go
1	  package pzpi_22_9_tymofiienko_snizhana_design_pattern
2
3	  import "fmt"
4
5	  // Інтерфейс реалізації
6	  type Device interface {
7	      IsEnabled() bool
8	      Enable()
9	      Disable()
10	      GetVolume() int
11	      SetVolume(int)
12	  }
13
14	  // Абстракція
15	  type Remote struct {
16	      device Device
17	  }
18
19	  func NewRemote(d Device) *Remote {
20	      return &Remote{device: d}
21	  }
22
23	  func (r *Remote) TogglePower() {
24	      if r.device.IsEnabled() {
25	           r.device.Disable()
26	      } else {
27	           r.device.Enable()
28	      }
29	  }
30
31	  func (r *Remote) VolumeUp() {
32	      r.device.SetVolume(r.device.GetVolume() + 10)
33	  }

34	  // Розширена абстракція
35	  type AdvancedRemote struct {
36	      *Remote
37	  }
38
39	  func NewAdvancedRemote(d Device) *AdvancedRemote {
40	      return &AdvancedRemote{NewRemote(d)}
41	  }
42
43	  func (r *AdvancedRemote) Mute() {
44	      r.device.SetVolume(0)
45	  }
46
47	  // Конкретна реалізація: Телевізор
48	  type Tv struct {
49	      enabled bool
50	      volume  int
51	  }

52	  func (t *Tv) IsEnabled() bool { return t.enabled }
53	  func (t *Tv) Enable(){
54	      t.enabled = true; fmt.Println("TV: enabled")
55	  }
56	  func (t *Tv) Disable(){
57	      t.enabled = false; fmt.Println("TV: disabled")
58	  }
59	  func (t *Tv) GetVolume() int { return t.volume }
60	  func (t *Tv) SetVolume(v int) {
61	      t.volume = v; fmt.Println("TV volume set to", v)
62	  }
63
64	  // Конкретна реалізація: Радіо
65	  type Radio struct {
66	      enabled bool
67	  volume  int
68	  }
69
70	  func (r *Radio) IsEnabled() bool { return r.enabled }
71	  func (r *Radio) Enable(){
72	      r.enabled = true; fmt.Println("Radio: enabled")
73	  }
74	  func (r *Radio) Disable(){
75	      r.enabled = false; fmt.Println("Radio: disabled")
76	  }
77	  func (r *Radio) GetVolume() int  { return r.volume }
78	  func (r *Radio) SetVolume(v int) {
79	      r.volume = v; fmt.Println("Radio volume set to", v)
80	  }
81
82	  // Клієнтський код
83	  func main() {
84	      tv := &Tv{}
85	      remote := NewRemote(tv)
86	      remote.TogglePower()
87	      remote.VolumeUp()
88
89	      radio := &Radio{}
90	      advRemote := NewAdvancedRemote(radio)
91	      advRemote.TogglePower()
92	      advRemote.Mute()
93	  }
